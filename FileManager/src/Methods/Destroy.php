<?php

namespace FileManager\Methods;

use FileManager\Except;
use FileManager\Methods\Scan;


/**
 * A FileManager aliases.
 * 
 * This part serves to remove (or destroy xD) folders or files thanks to a path.
 * Currently, it can onvly do :
 *  - remove files and folders recursively
 *  - get errors when removing
 * 
 * If you want to use this script appart and use all functions on your own,
 * you must add an indexer to get files recursively and change the *Error controller*.
 * That's why it's prefered to use it with the current files.
 * 
 * @package FileManager
 */

class Destroy extends Scan {

    /**
     * An array which will contains all errors generated by the deletion of the files.
     * The array will be empty if any errors were generated when executing the function.
     * 
     * @var array $errors
     */

    protected array $errors = array();
    

    /**
     * Create a new instance of the \FileManager\Destroy function.
     * If the path is not specified, it'll be using the function `setPath`.
     * 
     * @param ?string $path The path that will be used.
     * 
     * @return void
     */

    public function __construct(?string $path = "") {
        switch ($path) {
            // If is "empty", don't do anythin
            case "": break;

            // In case of the "current path"
            case "/":
            case "./":
                return [new Except, 'exception']('Cannot remove the current directory!');

            // And default (other possibility, set the path as current object's attribute)
            default:
                $this->setPath($path);
                break;
        }
    }


    /**
     * Set the path directory that will be delete.
     * 
     * Set the path of the directory that will be used by the programm.
     * The path can also be declared into the *`__construct`* function.
     * 
     * @param string $path the path that will be used
     * 
     * @return never
     */

    public function setPath(string $path)
    {
        if ($path !== "") 
            $this->path = $path;
        else [new Except, 'error']('$path cannot be empty.');
    }


    /**
     * Feature in developpement
     */

    public function setParams() {}


    /**
     * Destroy executing function
     * 
     * Execute the function and remove definitively a directory.\
     * Can get errors (if any) thanks to the `getErrors()` function.
     * 
     * @return never
     */

    public function execute()
    {
        if (!isset($this->_indexed_files)) {
            if (!isset($this->path) || empty($this->path)) {
                echo "path not set\n";
            }

            parent::dirExists();
            parent::recursiveScan();
            
            $this->orderBy($this->_indexed_files, $this::SEPARATE_FILES_FROM_FOLDERS);

            array_push($this->_indexed_files, $this->path);

            foreach ($this->_indexed_files as $f)
                array_push($this->errors, is_file($f) ? unlink($f) : rmdir($f));
        }
    }


    /**
     * Get errors from deletion
     * 
     * Return a non-empty array when errors happened when the `execute` function
     * was called. Otherwise a `null` value is provided.
     * 
     * @return array|null
     */

    public function getErrors(): ?array
    {
        $array = [];

        foreach ($this->errors as $err)
            if (!$err) array_push($array, $err);

        return empty($array) ? null : $array;
    }

}
